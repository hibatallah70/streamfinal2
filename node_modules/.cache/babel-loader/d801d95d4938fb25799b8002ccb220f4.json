{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\version video+blog+ lobby+chat1\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ContainerProvider } from './utils/container';\nimport { ThemeProvider } from '@material-ui/styles';\nimport THEME from './utils/theme';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nReactDOM.render( /*#__PURE__*/_jsxDEV(ThemeProvider, {\n  theme: THEME,\n  children: /*#__PURE__*/_jsxDEV(ContainerProvider, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 5\n}, this), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\nvar rtc = {\n  // For the local audio and video tracks.\n  localAudioTrack: null,\n  localVideoTrack: null\n};\nvar options = {\n  // Pass your app ID here.\n  appId: \"<Your app ID>\",\n  // Set the channel name.\n  channel: \"ChannelA\",\n  // Set the user role in the channel.\n  role: \"host\"\n}; // Fetch a token from the Golang server.\n\nfunction fetchToken(uid, channelName, tokenRole) {\n  return new Promise(function (resolve) {\n    axios.post('http://<Your Host URL and port>/fetch_rtc_token', {\n      uid: uid,\n      channelName: channelName,\n      role: tokenRole\n    }, {\n      headers: {\n        'Content-Type': 'application/json; charset=UTF-8'\n      }\n    }).then(function (response) {\n      const token = response.data.token;\n      resolve(token);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  });\n}\n\nasync function startBasicCall() {\n  const client = AgoraRTC.createClient({\n    mode: \"live\",\n    codec: \"vp8\"\n  });\n  client.setClientRole(options.role);\n  const uid = 123456; // Fetch a token before calling join to join a channel.\n\n  let token = await fetchToken(uid, options.channel, 1);\n  await client.join(options.appId, options.channel, token, uid);\n  rtc.localAudioTrack = await AgoraRTC.createMicrophoneAudioTrack();\n  rtc.localVideoTrack = await AgoraRTC.createCameraVideoTrack();\n  await client.publish([rtc.localAudioTrack, rtc.localVideoTrack]);\n  const localPlayerContainer = document.createElement(\"div\");\n  localPlayerContainer.id = uid;\n  localPlayerContainer.style.width = \"640px\";\n  localPlayerContainer.style.height = \"480px\";\n  document.body.append(localPlayerContainer);\n  rtc.localVideoTrack.play(localPlayerContainer);\n  console.log(\"publish success!\");\n  client.on(\"user-published\", async (user, mediaType) => {\n    await client.subscribe(user, mediaType);\n    console.log(\"subscribe success\");\n\n    if (mediaType === \"video\") {\n      const remoteVideoTrack = user.videoTrack;\n      const remotePlayerContainer = document.createElement(\"div\");\n      remotePlayerContainer.textContent = \"Remote user \" + user.uid.toString();\n      remotePlayerContainer.style.width = \"640px\";\n      remotePlayerContainer.style.height = \"480px\";\n      document.body.append(remotePlayerContainer);\n      remoteVideoTrack.play(remotePlayerContainer);\n    }\n\n    if (mediaType === \"audio\") {\n      const remoteAudioTrack = user.audioTrack;\n      remoteAudioTrack.play();\n    }\n\n    client.on(\"user-unpublished\", user => {\n      const remotePlayerContainer = document.getElementById(user.uid);\n      remotePlayerContainer.remove();\n    });\n  }); // When token-privilege-will-expire occurs, fetch a new token from the server and call renewToken to renew the token.\n\n  client.on(\"token-privilege-will-expire\", async function () {\n    let token = await fetchToken(uid, options.channel, 1);\n    await client.renewToken(token);\n  }); // When token-privilege-did-expire occurs, fetch a new token from the server and call join to rejoin the channel.\n\n  client.on(\"token-privilege-did-expire\", async function () {\n    console.log(\"Fetching the new Token\");\n    let token = await fetchToken(uid, options.channel, 1);\n    console.log(\"Rejoining the channel with new Token\");\n    await client.join(options.appId, options.channel, token, uid);\n  });\n}\n\nstartBasicCall();","map":{"version":3,"names":["React","ReactDOM","App","serviceWorker","ContainerProvider","ThemeProvider","THEME","render","document","getElementById","unregister","rtc","localAudioTrack","localVideoTrack","options","appId","channel","role","fetchToken","uid","channelName","tokenRole","Promise","resolve","axios","post","headers","then","response","token","data","catch","error","console","log","startBasicCall","client","AgoraRTC","createClient","mode","codec","setClientRole","join","createMicrophoneAudioTrack","createCameraVideoTrack","publish","localPlayerContainer","createElement","id","style","width","height","body","append","play","on","user","mediaType","subscribe","remoteVideoTrack","videoTrack","remotePlayerContainer","textContent","toString","remoteAudioTrack","audioTrack","remove","renewToken"],"sources":["C:/Users/hp/AppData/Local/Programs/Python/Python310/version video+blog+ lobby+chat1/src/index.js"],"sourcesContent":["import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport {ContainerProvider} from './utils/container'\r\nimport {ThemeProvider} from '@material-ui/styles'\r\nimport THEME from './utils/theme'\r\n\r\nReactDOM.render(\r\n    <ThemeProvider theme={THEME}>\r\n        <ContainerProvider>\r\n            <App/>\r\n        </ContainerProvider>\r\n    </ThemeProvider>,\r\n    document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\nvar rtc = {\r\n    // For the local audio and video tracks.\r\n    localAudioTrack: null,\r\n    localVideoTrack: null,\r\n};\r\n\r\nvar options = {\r\n    // Pass your app ID here.\r\n    appId: \"<Your app ID>\",\r\n    // Set the channel name.\r\n    channel: \"ChannelA\",\r\n    // Set the user role in the channel.\r\n    role: \"host\"\r\n};\r\n\r\n// Fetch a token from the Golang server.\r\nfunction fetchToken(uid, channelName, tokenRole) {\r\n\r\n    return new Promise(function (resolve) {\r\n        axios.post('http://<Your Host URL and port>/fetch_rtc_token', {\r\n            uid: uid,\r\n            channelName: channelName,\r\n            role: tokenRole\r\n        }, {\r\n            headers: {\r\n                'Content-Type': 'application/json; charset=UTF-8'\r\n            }\r\n        })\r\n            .then(function (response) {\r\n                const token = response.data.token;\r\n                resolve(token);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    })\r\n}\r\n\r\nasync function startBasicCall() {\r\n\r\n    const client = AgoraRTC.createClient({ mode: \"live\", codec: \"vp8\" });\r\n    client.setClientRole(options.role);\r\n    const uid = 123456;\r\n\r\n    // Fetch a token before calling join to join a channel.\r\n    let token = await fetchToken(uid, options.channel, 1);\r\n\r\n    await client.join(options.appId, options.channel, token, uid);\r\n    rtc.localAudioTrack = await AgoraRTC.createMicrophoneAudioTrack();\r\n    rtc.localVideoTrack = await AgoraRTC.createCameraVideoTrack();\r\n    await client.publish([rtc.localAudioTrack, rtc.localVideoTrack]);\r\n    const localPlayerContainer = document.createElement(\"div\");\r\n    localPlayerContainer.id = uid;\r\n    localPlayerContainer.style.width = \"640px\";\r\n    localPlayerContainer.style.height = \"480px\";\r\n    document.body.append(localPlayerContainer);\r\n\r\n    rtc.localVideoTrack.play(localPlayerContainer);\r\n\r\n    console.log(\"publish success!\");\r\n\r\n    client.on(\"user-published\", async (user, mediaType) => {\r\n        await client.subscribe(user, mediaType);\r\n        console.log(\"subscribe success\");\r\n\r\n        if (mediaType === \"video\") {\r\n            const remoteVideoTrack = user.videoTrack;\r\n            const remotePlayerContainer = document.createElement(\"div\");\r\n            remotePlayerContainer.textContent = \"Remote user \" + user.uid.toString();\r\n            remotePlayerContainer.style.width = \"640px\";\r\n            remotePlayerContainer.style.height = \"480px\";\r\n            document.body.append(remotePlayerContainer);\r\n            remoteVideoTrack.play(remotePlayerContainer);\r\n\r\n        }\r\n\r\n        if (mediaType === \"audio\") {\r\n            const remoteAudioTrack = user.audioTrack;\r\n            remoteAudioTrack.play();\r\n        }\r\n\r\n        client.on(\"user-unpublished\", user => {\r\n            const remotePlayerContainer = document.getElementById(user.uid);\r\n            remotePlayerContainer.remove();\r\n        });\r\n\r\n    });\r\n\r\n    // When token-privilege-will-expire occurs, fetch a new token from the server and call renewToken to renew the token.\r\n    client.on(\"token-privilege-will-expire\", async function () {\r\n        let token = await fetchToken(uid, options.channel, 1);\r\n        await client.renewToken(token);\r\n    });\r\n\r\n    // When token-privilege-did-expire occurs, fetch a new token from the server and call join to rejoin the channel.\r\n    client.on(\"token-privilege-did-expire\", async function () {\r\n        console.log(\"Fetching the new Token\")\r\n        let token = await fetchToken(uid, options.channel, 1);\r\n        console.log(\"Rejoining the channel with new Token\")\r\n        await client.join(options.appId, options.channel, token, uid);\r\n    });\r\n\r\n}\r\n\r\nstartBasicCall()"],"mappings":"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"},"metadata":{},"sourceType":"module"}