{"ast":null,"code":"import AgoraRTC from 'agora-rtc-sdk-ng';\nimport EventEmitter from 'events';\nconst appID = process.env.REACT_APP_AGORA_APP_ID;\nconsole.log('agora sdk version: ' + AgoraRTC.VERSION + ' compatible: ' + AgoraRTC.checkSystemRequirements());\nexport default class RTCClient {\n  constructor() {\n    this._client = null;\n    this._joined = false;\n    this._leave = false;\n    this.mLocalAudioTrack = null;\n    this.mLocalVideoTrack = null;\n    this._uid = 0;\n    this._eventBus = new EventEmitter();\n    this._created = false;\n  }\n\n  createClient(data) {\n    if (this._client != null) {\n      return this._client;\n    }\n\n    const config = {\n      mode: data !== null && data !== void 0 && data.mode ? data.mode : 'live',\n      codec: data !== null && data !== void 0 && data.codec ? data.codec : 'vp8'\n    };\n    console.debug('createClient() mode: ' + config.mode + ' codec: ' + config.codec);\n    this._client = AgoraRTC.createClient(config);\n    this._created = true;\n    return this._client;\n  }\n\n  destroy() {\n    console.debug('destroy()');\n    this._created = false;\n    this._client = null;\n  }\n\n  on(evt, callback) {\n    this._client.on(evt, callback);\n  }\n\n  setClientRole(role) {\n    console.debug('setClientRole() role: ' + role);\n\n    this._client.setClientRole(role);\n  }\n\n  startLive(microphoneId, cameraId) {\n    return new Promise((resolve, reject) => {\n      console.debug('startLive()');\n      AgoraRTC.createMicrophoneAndCameraTracks({\n        microphoneId: microphoneId\n      }, {\n        cameraId: cameraId\n      }).then(tracks => {\n        this.mLocalAudioTrack = tracks[0];\n        this.mLocalVideoTrack = tracks[1];\n\n        this._client.publish([this.mLocalAudioTrack, this.mLocalVideoTrack]);\n\n        resolve();\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  }\n\n  stopLive() {\n    console.debug('stopLive()');\n\n    if (this.mLocalAudioTrack) {\n      this._client.unpublish(this.mLocalAudioTrack);\n\n      this.mLocalAudioTrack.stop();\n      this.mLocalAudioTrack.close();\n      this.mLocalAudioTrack = null;\n    }\n\n    if (this.mLocalVideoTrack) {\n      this._client.unpublish(this.mLocalVideoTrack);\n\n      this.mLocalVideoTrack.stop();\n      this.mLocalVideoTrack.close();\n      this.mLocalVideoTrack = null;\n    }\n  }\n\n  async startShareScrren() {\n    [this.mLocalAudioTrack, this.mLocalVideoTrack] = await Promise.all([AgoraRTC.createMicrophoneAudioTrack(), AgoraRTC.createScreenVideoTrack()]);\n\n    if (this.mLocalAudioTrack) {\n      this._client.publish(this.mLocalAudioTrack);\n    }\n\n    if (this.mLocalVideoTrack) {\n      this._client.publish(this.mLocalVideoTrack);\n    }\n  }\n\n  stopShareScrren() {\n    console.debug('stopShareScrren()');\n\n    if (this.mLocalAudioTrack) {\n      this._client.unpublish(this.mLocalAudioTrack);\n\n      this.mLocalAudioTrack.stop();\n      this.mLocalAudioTrack.close();\n      this.mLocalAudioTrack = null;\n    }\n\n    if (this.mLocalVideoTrack) {\n      this._client.unpublish(this.mLocalVideoTrack);\n\n      this.mLocalVideoTrack.stop();\n      this.mLocalVideoTrack.close();\n      this.mLocalVideoTrack = null;\n    }\n  }\n\n  subscribe(user, mediaType) {\n    return new Promise((resolve, reject) => {\n      this._client.subscribe(user, mediaType).then(mRemoteTrack => {\n        console.debug(`subscribe success user=${user.uid}, mediaType=${mediaType}`);\n        resolve(mRemoteTrack);\n      }).catch(e => {\n        console.debug(`subscribe error user=${user.uid}, mediaType=${mediaType}`);\n      });\n    });\n  }\n\n  getDevices() {\n    return new Promise((resolve, reject) => {\n      if (!this._client) {\n        this.createClient();\n      }\n\n      console.debug('getDevices()');\n\n      if (this.mLocalAudioTrack) {\n        this.mLocalAudioTrack.stop();\n        this.mLocalAudioTrack.close();\n        this.mLocalAudioTrack = null;\n      }\n\n      if (this.mLocalVideoTrack) {\n        this.mLocalVideoTrack.stop();\n        this.mLocalVideoTrack.close();\n        this.mLocalVideoTrack = null;\n      }\n\n      AgoraRTC.createMicrophoneAndCameraTracks().then(tracks => {\n        this.mLocalAudioTrack = tracks[0];\n        this.mLocalVideoTrack = tracks[1];\n        AgoraRTC.getDevices().then(it => {\n          resolve(it);\n\n          if (this.mLocalAudioTrack) {\n            this.mLocalAudioTrack.stop();\n            this.mLocalAudioTrack.close();\n            this.mLocalAudioTrack = null;\n          }\n\n          if (this.mLocalVideoTrack) {\n            this.mLocalVideoTrack.stop();\n            this.mLocalVideoTrack.close();\n            this.mLocalVideoTrack = null;\n          }\n        });\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  }\n\n  join(channel, token) {\n    return new Promise((resolve, reject) => {\n      if (this._joined == true) {\n        resolve(this._uid);\n        return;\n      }\n\n      this._joined = true;\n      this._leave = false;\n      this._uid = 0;\n      console.debug('join appID: ' + appID + ',channel: ' + channel);\n\n      this._client.join(appID, channel, token || null).then(uid => {\n        console.debug('join success, channel: ' + channel + ', uid: ' + uid);\n        this._uid = uid;\n        this._joined = true;\n        resolve(uid);\n      }).catch(e => {\n        this._joined = false;\n        reject(e);\n        console.error('join error: ' + e);\n      });\n    });\n  }\n\n  leave() {\n    return new Promise(resolve => {\n      if (this._leave == true) {\n        resolve();\n        return;\n      }\n\n      console.debug('leave()');\n      this._leave = true;\n      if (!this._client) return resolve();\n\n      this._client.leave().then(() => {\n        console.debug('leave() success');\n        this._joined = false;\n        this._uid = null;\n        resolve();\n      }).catch(e => {\n        console.error('leave failed: ' + e);\n      });\n    });\n  }\n\n}","map":{"version":3,"names":["AgoraRTC","EventEmitter","appID","process","env","REACT_APP_AGORA_APP_ID","console","log","VERSION","checkSystemRequirements","RTCClient","constructor","_client","_joined","_leave","mLocalAudioTrack","mLocalVideoTrack","_uid","_eventBus","_created","createClient","data","config","mode","codec","debug","destroy","on","evt","callback","setClientRole","role","startLive","microphoneId","cameraId","Promise","resolve","reject","createMicrophoneAndCameraTracks","then","tracks","publish","catch","e","stopLive","unpublish","stop","close","startShareScrren","all","createMicrophoneAudioTrack","createScreenVideoTrack","stopShareScrren","subscribe","user","mediaType","mRemoteTrack","uid","getDevices","it","join","channel","token","error","leave"],"sources":["C:/Users/hp/AppData/Local/Programs/Python/Python310/version video+blog+ lobby+chat1/src/rtc-client.js"],"sourcesContent":["import AgoraRTC from 'agora-rtc-sdk-ng'\r\nimport EventEmitter from 'events'\r\n\r\nconst appID = process.env.REACT_APP_AGORA_APP_ID\r\nconsole.log(\r\n    'agora sdk version: ' +\r\n    AgoraRTC.VERSION +\r\n    ' compatible: ' +\r\n    AgoraRTC.checkSystemRequirements()\r\n)\r\n\r\n\r\nexport default class RTCClient {\r\n    constructor() {\r\n        this._client = null\r\n        this._joined = false\r\n        this._leave = false\r\n        this.mLocalAudioTrack = null\r\n        this.mLocalVideoTrack = null\r\n        this._uid = 0\r\n        this._eventBus = new EventEmitter()\r\n        this._created = false\r\n    }\r\n\r\n    createClient(data) {\r\n        if (this._client != null) {\r\n            return this._client\r\n        }\r\n\r\n        const config = {\r\n            mode: data?.mode ? data.mode : 'live',\r\n            codec: data?.codec ? data.codec : 'vp8'\r\n        }\r\n        console.debug('createClient() mode: ' + config.mode + ' codec: ' + config.codec)\r\n        this._client = AgoraRTC.createClient(config)\r\n        this._created = true\r\n        return this._client\r\n    }\r\n\r\n    destroy() {\r\n        console.debug('destroy()')\r\n        this._created = false\r\n        this._client = null\r\n    }\r\n\r\n    on(evt, callback) {\r\n        this._client.on(evt, callback)\r\n    }\r\n\r\n    setClientRole(role) {\r\n        console.debug('setClientRole() role: ' + role)\r\n        this._client.setClientRole(role)\r\n    }\r\n\r\n    startLive(microphoneId, cameraId) {\r\n        return new Promise((resolve, reject) => {\r\n            console.debug('startLive()')\r\n\r\n            AgoraRTC.createMicrophoneAndCameraTracks({microphoneId: microphoneId}, {cameraId: cameraId})\r\n                .then((tracks) => {\r\n                    this.mLocalAudioTrack = tracks[0]\r\n                    this.mLocalVideoTrack = tracks[1]\r\n                    this._client.publish([this.mLocalAudioTrack, this.mLocalVideoTrack])\r\n\r\n                    resolve()\r\n                })\r\n                .catch(e => {\r\n                    reject(e)\r\n                })\r\n        })\r\n    }\r\n\r\n    stopLive() {\r\n        console.debug('stopLive()')\r\n\r\n        if (this.mLocalAudioTrack) {\r\n            this._client.unpublish(this.mLocalAudioTrack)\r\n\r\n            this.mLocalAudioTrack.stop()\r\n            this.mLocalAudioTrack.close()\r\n            this.mLocalAudioTrack = null\r\n        }\r\n\r\n        if (this.mLocalVideoTrack) {\r\n            this._client.unpublish(this.mLocalVideoTrack)\r\n\r\n            this.mLocalVideoTrack.stop()\r\n            this.mLocalVideoTrack.close()\r\n            this.mLocalVideoTrack = null\r\n        }\r\n    }\r\n\r\n    async startShareScrren() {\r\n        [this.mLocalAudioTrack, this.mLocalVideoTrack] = await Promise.all([\r\n            AgoraRTC.createMicrophoneAudioTrack(),\r\n            AgoraRTC.createScreenVideoTrack()\r\n        ])\r\n\r\n        if (this.mLocalAudioTrack) {\r\n            this._client.publish(this.mLocalAudioTrack)\r\n        }\r\n\r\n        if (this.mLocalVideoTrack) {\r\n            this._client.publish(this.mLocalVideoTrack)\r\n        }\r\n    }\r\n\r\n    stopShareScrren() {\r\n        console.debug('stopShareScrren()')\r\n\r\n        if (this.mLocalAudioTrack) {\r\n            this._client.unpublish(this.mLocalAudioTrack)\r\n\r\n            this.mLocalAudioTrack.stop()\r\n            this.mLocalAudioTrack.close()\r\n            this.mLocalAudioTrack = null\r\n        }\r\n\r\n        if (this.mLocalVideoTrack) {\r\n            this._client.unpublish(this.mLocalVideoTrack)\r\n\r\n            this.mLocalVideoTrack.stop()\r\n            this.mLocalVideoTrack.close()\r\n            this.mLocalVideoTrack = null\r\n        }\r\n    }\r\n\r\n    subscribe(user, mediaType) {\r\n        return new Promise((resolve, reject) => {\r\n            this._client.subscribe(user, mediaType)\r\n                .then(mRemoteTrack => {\r\n                    console.debug(`subscribe success user=${user.uid}, mediaType=${mediaType}`)\r\n                    resolve(mRemoteTrack)\r\n                })\r\n                .catch(e => {\r\n                    console.debug(`subscribe error user=${user.uid}, mediaType=${mediaType}`)\r\n                })\r\n        })\r\n    }\r\n\r\n    getDevices() {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this._client) {\r\n                this.createClient()\r\n            }\r\n\r\n            console.debug('getDevices()')\r\n\r\n            if (this.mLocalAudioTrack) {\r\n                this.mLocalAudioTrack.stop()\r\n                this.mLocalAudioTrack.close()\r\n                this.mLocalAudioTrack = null\r\n            }\r\n\r\n            if (this.mLocalVideoTrack) {\r\n                this.mLocalVideoTrack.stop()\r\n                this.mLocalVideoTrack.close()\r\n                this.mLocalVideoTrack = null\r\n            }\r\n\r\n            AgoraRTC.createMicrophoneAndCameraTracks()\r\n                .then((tracks) => {\r\n                    this.mLocalAudioTrack = tracks[0]\r\n                    this.mLocalVideoTrack = tracks[1]\r\n\r\n                    AgoraRTC.getDevices().then(it => {\r\n                        resolve(it)\r\n\r\n                        if (this.mLocalAudioTrack) {\r\n                            this.mLocalAudioTrack.stop()\r\n                            this.mLocalAudioTrack.close()\r\n                            this.mLocalAudioTrack = null\r\n                        }\r\n\r\n                        if (this.mLocalVideoTrack) {\r\n                            this.mLocalVideoTrack.stop()\r\n                            this.mLocalVideoTrack.close()\r\n                            this.mLocalVideoTrack = null\r\n                        }\r\n                    })\r\n                })\r\n                .catch(e => {\r\n                    reject(e)\r\n                })\r\n        })\r\n    }\r\n\r\n    join(channel, token) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this._joined == true) {\r\n                resolve(this._uid)\r\n                return\r\n            }\r\n\r\n            this._joined = true\r\n            this._leave = false\r\n            this._uid = 0\r\n            console.debug('join appID: ' + appID + ',channel: ' + channel)\r\n\r\n            this._client.join(appID, channel, token || null).then(uid => {\r\n                console.debug(\r\n                    'join success, channel: ' + channel + ', uid: ' + uid\r\n                )\r\n\r\n                this._uid = uid\r\n                this._joined = true\r\n\r\n                resolve(uid)\r\n            })\r\n                .catch(e => {\r\n                    this._joined = false\r\n                    reject(e)\r\n                    console.error('join error: ' + e)\r\n                })\r\n        })\r\n    }\r\n\r\n    leave() {\r\n        return new Promise((resolve) => {\r\n            if (this._leave == true) {\r\n                resolve()\r\n                return\r\n            }\r\n\r\n            console.debug('leave()')\r\n            this._leave = true\r\n            if (!this._client) return resolve()\r\n\r\n            this._client.leave()\r\n                .then(() => {\r\n                    console.debug('leave() success')\r\n                    this._joined = false\r\n                    this._uid = null\r\n                    resolve()\r\n                })\r\n                .catch((e) => {\r\n                    console.error('leave failed: ' + e)\r\n                })\r\n        })\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}