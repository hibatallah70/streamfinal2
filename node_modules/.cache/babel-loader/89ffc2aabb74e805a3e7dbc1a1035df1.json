{"ast":null,"code":"import AgoraRTC from 'agora-rtc-sdk-ng';\nimport EventEmitter from 'events';\nconst appID = process.env.REACT_APP_AGORA_APP_ID;\nconsole.log('agora sdk version: ' + AgoraRTC.VERSION + ' compatible: ' + AgoraRTC.checkSystemRequirements());\nvar rtc = {\n  // For the local audio and video tracks.\n  localAudioTrack: null,\n  localVideoTrack: null\n};\nvar options = {\n  // Pass your app ID here.\n  appId: \"<Your app ID>\",\n  // Set the channel name.\n  channel: \"ChannelA\",\n  // Set the user role in the channel.\n  role: \"host\"\n}; // Fetch a token from the Golang server.\n\nfunction fetchToken(uid, channelName, tokenRole) {\n  return new Promise(function (resolve) {\n    axios.post('http://<Your Host URL and port>/fetch_rtc_token', {\n      uid: uid,\n      channelName: channelName,\n      role: tokenRole\n    }, {\n      headers: {\n        'Content-Type': 'application/json; charset=UTF-8'\n      }\n    }).then(function (response) {\n      const token = response.data.token;\n      resolve(token);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  });\n}\n\nasync function startBasicCall() {\n  const client = AgoraRTC.createClient({\n    mode: \"live\",\n    codec: \"vp8\"\n  });\n  client.setClientRole(options.role);\n  const uid = 123456; // Fetch a token before calling join to join a channel.\n\n  let token = await fetchToken(uid, options.channel, 1);\n  await client.join(options.appId, options.channel, token, uid);\n  rtc.localAudioTrack = await AgoraRTC.createMicrophoneAudioTrack();\n  rtc.localVideoTrack = await AgoraRTC.createCameraVideoTrack();\n  await client.publish([rtc.localAudioTrack, rtc.localVideoTrack]);\n  const localPlayerContainer = document.createElement(\"div\");\n  localPlayerContainer.id = uid;\n  localPlayerContainer.style.width = \"640px\";\n  localPlayerContainer.style.height = \"480px\";\n  document.body.append(localPlayerContainer);\n  rtc.localVideoTrack.play(localPlayerContainer);\n  console.log(\"publish success!\");\n  client.on(\"user-published\", async (user, mediaType) => {\n    await client.subscribe(user, mediaType);\n    console.log(\"subscribe success\");\n\n    if (mediaType === \"video\") {\n      const remoteVideoTrack = user.videoTrack;\n      const remotePlayerContainer = document.createElement(\"div\");\n      remotePlayerContainer.textContent = \"Remote user \" + user.uid.toString();\n      remotePlayerContainer.style.width = \"640px\";\n      remotePlayerContainer.style.height = \"480px\";\n      document.body.append(remotePlayerContainer);\n      remoteVideoTrack.play(remotePlayerContainer);\n    }\n\n    if (mediaType === \"audio\") {\n      const remoteAudioTrack = user.audioTrack;\n      remoteAudioTrack.play();\n    }\n\n    client.on(\"user-unpublished\", user => {\n      const remotePlayerContainer = document.getElementById(user.uid);\n      remotePlayerContainer.remove();\n    });\n  }); // When token-privilege-will-expire occurs, fetch a new token from the server and call renewToken to renew the token.\n\n  client.on(\"token-privilege-will-expire\", async function () {\n    let token = await fetchToken(uid, options.channel, 1);\n    await client.renewToken(token);\n  }); // When token-privilege-did-expire occurs, fetch a new token from the server and call join to rejoin the channel.\n\n  client.on(\"token-privilege-did-expire\", async function () {\n    console.log(\"Fetching the new Token\");\n    let token = await fetchToken(uid, options.channel, 1);\n    console.log(\"Rejoining the channel with new Token\");\n    await client.join(options.appId, options.channel, token, uid);\n  });\n}\n\nstartBasicCall();\nexport default class RTCClient {\n  constructor() {\n    this._client = null;\n    this._joined = false;\n    this._leave = false;\n    this.mLocalAudioTrack = null;\n    this.mLocalVideoTrack = null;\n    this._uid = 0;\n    this._eventBus = new EventEmitter();\n    this._created = false;\n  }\n\n  createClient(data) {\n    if (this._client != null) {\n      return this._client;\n    }\n\n    const config = {\n      mode: data !== null && data !== void 0 && data.mode ? data.mode : 'live',\n      codec: data !== null && data !== void 0 && data.codec ? data.codec : 'vp8'\n    };\n    console.debug('createClient() mode: ' + config.mode + ' codec: ' + config.codec);\n    this._client = AgoraRTC.createClient(config);\n    this._created = true;\n    return this._client;\n  }\n\n  destroy() {\n    console.debug('destroy()');\n    this._created = false;\n    this._client = null;\n  }\n\n  on(evt, callback) {\n    this._client.on(evt, callback);\n  }\n\n  setClientRole(role) {\n    console.debug('setClientRole() role: ' + role);\n\n    this._client.setClientRole(role);\n  }\n\n  startLive(microphoneId, cameraId) {\n    return new Promise((resolve, reject) => {\n      console.debug('startLive()');\n      AgoraRTC.createMicrophoneAndCameraTracks({\n        microphoneId: microphoneId\n      }, {\n        cameraId: cameraId\n      }).then(tracks => {\n        this.mLocalAudioTrack = tracks[0];\n        this.mLocalVideoTrack = tracks[1];\n\n        this._client.publish([this.mLocalAudioTrack, this.mLocalVideoTrack]);\n\n        resolve();\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  }\n\n  stopLive() {\n    console.debug('stopLive()');\n\n    if (this.mLocalAudioTrack) {\n      this._client.unpublish(this.mLocalAudioTrack);\n\n      this.mLocalAudioTrack.stop();\n      this.mLocalAudioTrack.close();\n      this.mLocalAudioTrack = null;\n    }\n\n    if (this.mLocalVideoTrack) {\n      this._client.unpublish(this.mLocalVideoTrack);\n\n      this.mLocalVideoTrack.stop();\n      this.mLocalVideoTrack.close();\n      this.mLocalVideoTrack = null;\n    }\n  }\n\n  async startShareScrren() {\n    [this.mLocalAudioTrack, this.mLocalVideoTrack] = await Promise.all([AgoraRTC.createMicrophoneAudioTrack(), AgoraRTC.createScreenVideoTrack()]);\n\n    if (this.mLocalAudioTrack) {\n      this._client.publish(this.mLocalAudioTrack);\n    }\n\n    if (this.mLocalVideoTrack) {\n      this._client.publish(this.mLocalVideoTrack);\n    }\n  }\n\n  stopShareScrren() {\n    console.debug('stopShareScrren()');\n\n    if (this.mLocalAudioTrack) {\n      this._client.unpublish(this.mLocalAudioTrack);\n\n      this.mLocalAudioTrack.stop();\n      this.mLocalAudioTrack.close();\n      this.mLocalAudioTrack = null;\n    }\n\n    if (this.mLocalVideoTrack) {\n      this._client.unpublish(this.mLocalVideoTrack);\n\n      this.mLocalVideoTrack.stop();\n      this.mLocalVideoTrack.close();\n      this.mLocalVideoTrack = null;\n    }\n  }\n\n  subscribe(user, mediaType) {\n    return new Promise((resolve, reject) => {\n      this._client.subscribe(user, mediaType).then(mRemoteTrack => {\n        console.debug(`subscribe success user=${user.uid}, mediaType=${mediaType}`);\n        resolve(mRemoteTrack);\n      }).catch(e => {\n        console.debug(`subscribe error user=${user.uid}, mediaType=${mediaType}`);\n      });\n    });\n  }\n\n  getDevices() {\n    return new Promise((resolve, reject) => {\n      if (!this._client) {\n        this.createClient();\n      }\n\n      console.debug('getDevices()');\n\n      if (this.mLocalAudioTrack) {\n        this.mLocalAudioTrack.stop();\n        this.mLocalAudioTrack.close();\n        this.mLocalAudioTrack = null;\n      }\n\n      if (this.mLocalVideoTrack) {\n        this.mLocalVideoTrack.stop();\n        this.mLocalVideoTrack.close();\n        this.mLocalVideoTrack = null;\n      }\n\n      AgoraRTC.createMicrophoneAndCameraTracks().then(tracks => {\n        this.mLocalAudioTrack = tracks[0];\n        this.mLocalVideoTrack = tracks[1];\n        AgoraRTC.getDevices().then(it => {\n          resolve(it);\n\n          if (this.mLocalAudioTrack) {\n            this.mLocalAudioTrack.stop();\n            this.mLocalAudioTrack.close();\n            this.mLocalAudioTrack = null;\n          }\n\n          if (this.mLocalVideoTrack) {\n            this.mLocalVideoTrack.stop();\n            this.mLocalVideoTrack.close();\n            this.mLocalVideoTrack = null;\n          }\n        });\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  }\n\n  join(channel, token) {\n    return new Promise((resolve, reject) => {\n      if (this._joined == true) {\n        resolve(this._uid);\n        return;\n      }\n\n      this._joined = true;\n      this._leave = false;\n      this._uid = 0;\n      console.debug('join appID: ' + appID + ',channel: ' + channel);\n\n      this._client.join(appID, channel, token || null).then(uid => {\n        console.debug('join success, channel: ' + channel + ', uid: ' + uid);\n        this._uid = uid;\n        this._joined = true;\n        resolve(uid);\n      }).catch(e => {\n        this._joined = false;\n        reject(e);\n        console.error('join error: ' + e);\n      });\n    });\n  }\n\n  leave() {\n    return new Promise(resolve => {\n      if (this._leave == true) {\n        resolve();\n        return;\n      }\n\n      console.debug('leave()');\n      this._leave = true;\n      if (!this._client) return resolve();\n\n      this._client.leave().then(() => {\n        console.debug('leave() success');\n        this._joined = false;\n        this._uid = null;\n        resolve();\n      }).catch(e => {\n        console.error('leave failed: ' + e);\n      });\n    });\n  }\n\n}","map":{"version":3,"names":["AgoraRTC","EventEmitter","appID","process","env","REACT_APP_AGORA_APP_ID","console","log","VERSION","checkSystemRequirements","rtc","localAudioTrack","localVideoTrack","options","appId","channel","role","fetchToken","uid","channelName","tokenRole","Promise","resolve","axios","post","headers","then","response","token","data","catch","error","startBasicCall","client","createClient","mode","codec","setClientRole","join","createMicrophoneAudioTrack","createCameraVideoTrack","publish","localPlayerContainer","document","createElement","id","style","width","height","body","append","play","on","user","mediaType","subscribe","remoteVideoTrack","videoTrack","remotePlayerContainer","textContent","toString","remoteAudioTrack","audioTrack","getElementById","remove","renewToken","RTCClient","constructor","_client","_joined","_leave","mLocalAudioTrack","mLocalVideoTrack","_uid","_eventBus","_created","config","debug","destroy","evt","callback","startLive","microphoneId","cameraId","reject","createMicrophoneAndCameraTracks","tracks","e","stopLive","unpublish","stop","close","startShareScrren","all","createScreenVideoTrack","stopShareScrren","mRemoteTrack","getDevices","it","leave"],"sources":["C:/Users/hp/AppData/Local/Programs/Python/Python310/version video+blog+ lobby+chat1/src/rtc-client.js"],"sourcesContent":["import AgoraRTC from 'agora-rtc-sdk-ng'\r\nimport EventEmitter from 'events'\r\n\r\nconst appID = process.env.REACT_APP_AGORA_APP_ID\r\nconsole.log(\r\n    'agora sdk version: ' +\r\n    AgoraRTC.VERSION +\r\n    ' compatible: ' +\r\n    AgoraRTC.checkSystemRequirements()\r\n)\r\n\r\nvar rtc = {\r\n    // For the local audio and video tracks.\r\n    localAudioTrack: null,\r\n    localVideoTrack: null,\r\n};\r\n\r\nvar options = {\r\n    // Pass your app ID here.\r\n    appId: \"<Your app ID>\",\r\n    // Set the channel name.\r\n    channel: \"ChannelA\",\r\n    // Set the user role in the channel.\r\n    role: \"host\"\r\n};\r\n\r\n// Fetch a token from the Golang server.\r\nfunction fetchToken(uid, channelName, tokenRole) {\r\n\r\n    return new Promise(function (resolve) {\r\n        axios.post('http://<Your Host URL and port>/fetch_rtc_token', {\r\n            uid: uid,\r\n            channelName: channelName,\r\n            role: tokenRole\r\n        }, {\r\n            headers: {\r\n                'Content-Type': 'application/json; charset=UTF-8'\r\n            }\r\n        })\r\n            .then(function (response) {\r\n                const token = response.data.token;\r\n                resolve(token);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    })\r\n}\r\n\r\nasync function startBasicCall() {\r\n\r\n    const client = AgoraRTC.createClient({ mode: \"live\", codec: \"vp8\" });\r\n    client.setClientRole(options.role);\r\n    const uid = 123456;\r\n\r\n    // Fetch a token before calling join to join a channel.\r\n    let token = await fetchToken(uid, options.channel, 1);\r\n\r\n    await client.join(options.appId, options.channel, token, uid);\r\n    rtc.localAudioTrack = await AgoraRTC.createMicrophoneAudioTrack();\r\n    rtc.localVideoTrack = await AgoraRTC.createCameraVideoTrack();\r\n    await client.publish([rtc.localAudioTrack, rtc.localVideoTrack]);\r\n    const localPlayerContainer = document.createElement(\"div\");\r\n    localPlayerContainer.id = uid;\r\n    localPlayerContainer.style.width = \"640px\";\r\n    localPlayerContainer.style.height = \"480px\";\r\n    document.body.append(localPlayerContainer);\r\n\r\n    rtc.localVideoTrack.play(localPlayerContainer);\r\n\r\n    console.log(\"publish success!\");\r\n\r\n    client.on(\"user-published\", async (user, mediaType) => {\r\n        await client.subscribe(user, mediaType);\r\n        console.log(\"subscribe success\");\r\n\r\n        if (mediaType === \"video\") {\r\n            const remoteVideoTrack = user.videoTrack;\r\n            const remotePlayerContainer = document.createElement(\"div\");\r\n            remotePlayerContainer.textContent = \"Remote user \" + user.uid.toString();\r\n            remotePlayerContainer.style.width = \"640px\";\r\n            remotePlayerContainer.style.height = \"480px\";\r\n            document.body.append(remotePlayerContainer);\r\n            remoteVideoTrack.play(remotePlayerContainer);\r\n\r\n        }\r\n\r\n        if (mediaType === \"audio\") {\r\n            const remoteAudioTrack = user.audioTrack;\r\n            remoteAudioTrack.play();\r\n        }\r\n\r\n        client.on(\"user-unpublished\", user => {\r\n            const remotePlayerContainer = document.getElementById(user.uid);\r\n            remotePlayerContainer.remove();\r\n        });\r\n\r\n    });\r\n\r\n    // When token-privilege-will-expire occurs, fetch a new token from the server and call renewToken to renew the token.\r\n    client.on(\"token-privilege-will-expire\", async function () {\r\n        let token = await fetchToken(uid, options.channel, 1);\r\n        await client.renewToken(token);\r\n    });\r\n\r\n    // When token-privilege-did-expire occurs, fetch a new token from the server and call join to rejoin the channel.\r\n    client.on(\"token-privilege-did-expire\", async function () {\r\n        console.log(\"Fetching the new Token\")\r\n        let token = await fetchToken(uid, options.channel, 1);\r\n        console.log(\"Rejoining the channel with new Token\")\r\n        await client.join(options.appId, options.channel, token, uid);\r\n    });\r\n\r\n}\r\n\r\nstartBasicCall()\r\n\r\nexport default class RTCClient {\r\n    constructor() {\r\n        this._client = null\r\n        this._joined = false\r\n        this._leave = false\r\n        this.mLocalAudioTrack = null\r\n        this.mLocalVideoTrack = null\r\n        this._uid = 0\r\n        this._eventBus = new EventEmitter()\r\n        this._created = false\r\n    }\r\n\r\n    createClient(data) {\r\n        if (this._client != null) {\r\n            return this._client\r\n        }\r\n\r\n        const config = {\r\n            mode: data?.mode ? data.mode : 'live',\r\n            codec: data?.codec ? data.codec : 'vp8'\r\n        }\r\n        console.debug('createClient() mode: ' + config.mode + ' codec: ' + config.codec)\r\n        this._client = AgoraRTC.createClient(config)\r\n        this._created = true\r\n        return this._client\r\n    }\r\n\r\n    destroy() {\r\n        console.debug('destroy()')\r\n        this._created = false\r\n        this._client = null\r\n    }\r\n\r\n    on(evt, callback) {\r\n        this._client.on(evt, callback)\r\n    }\r\n\r\n    setClientRole(role) {\r\n        console.debug('setClientRole() role: ' + role)\r\n        this._client.setClientRole(role)\r\n    }\r\n\r\n    startLive(microphoneId, cameraId) {\r\n        return new Promise((resolve, reject) => {\r\n            console.debug('startLive()')\r\n\r\n            AgoraRTC.createMicrophoneAndCameraTracks({microphoneId: microphoneId}, {cameraId: cameraId})\r\n                .then((tracks) => {\r\n                    this.mLocalAudioTrack = tracks[0]\r\n                    this.mLocalVideoTrack = tracks[1]\r\n                    this._client.publish([this.mLocalAudioTrack, this.mLocalVideoTrack])\r\n\r\n                    resolve()\r\n                })\r\n                .catch(e => {\r\n                    reject(e)\r\n                })\r\n        })\r\n    }\r\n\r\n    stopLive() {\r\n        console.debug('stopLive()')\r\n\r\n        if (this.mLocalAudioTrack) {\r\n            this._client.unpublish(this.mLocalAudioTrack)\r\n\r\n            this.mLocalAudioTrack.stop()\r\n            this.mLocalAudioTrack.close()\r\n            this.mLocalAudioTrack = null\r\n        }\r\n\r\n        if (this.mLocalVideoTrack) {\r\n            this._client.unpublish(this.mLocalVideoTrack)\r\n\r\n            this.mLocalVideoTrack.stop()\r\n            this.mLocalVideoTrack.close()\r\n            this.mLocalVideoTrack = null\r\n        }\r\n    }\r\n\r\n    async startShareScrren() {\r\n        [this.mLocalAudioTrack, this.mLocalVideoTrack] = await Promise.all([\r\n            AgoraRTC.createMicrophoneAudioTrack(),\r\n            AgoraRTC.createScreenVideoTrack()\r\n        ])\r\n\r\n        if (this.mLocalAudioTrack) {\r\n            this._client.publish(this.mLocalAudioTrack)\r\n        }\r\n\r\n        if (this.mLocalVideoTrack) {\r\n            this._client.publish(this.mLocalVideoTrack)\r\n        }\r\n    }\r\n\r\n    stopShareScrren() {\r\n        console.debug('stopShareScrren()')\r\n\r\n        if (this.mLocalAudioTrack) {\r\n            this._client.unpublish(this.mLocalAudioTrack)\r\n\r\n            this.mLocalAudioTrack.stop()\r\n            this.mLocalAudioTrack.close()\r\n            this.mLocalAudioTrack = null\r\n        }\r\n\r\n        if (this.mLocalVideoTrack) {\r\n            this._client.unpublish(this.mLocalVideoTrack)\r\n\r\n            this.mLocalVideoTrack.stop()\r\n            this.mLocalVideoTrack.close()\r\n            this.mLocalVideoTrack = null\r\n        }\r\n    }\r\n\r\n    subscribe(user, mediaType) {\r\n        return new Promise((resolve, reject) => {\r\n            this._client.subscribe(user, mediaType)\r\n                .then(mRemoteTrack => {\r\n                    console.debug(`subscribe success user=${user.uid}, mediaType=${mediaType}`)\r\n                    resolve(mRemoteTrack)\r\n                })\r\n                .catch(e => {\r\n                    console.debug(`subscribe error user=${user.uid}, mediaType=${mediaType}`)\r\n                })\r\n        })\r\n    }\r\n\r\n    getDevices() {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this._client) {\r\n                this.createClient()\r\n            }\r\n\r\n            console.debug('getDevices()')\r\n\r\n            if (this.mLocalAudioTrack) {\r\n                this.mLocalAudioTrack.stop()\r\n                this.mLocalAudioTrack.close()\r\n                this.mLocalAudioTrack = null\r\n            }\r\n\r\n            if (this.mLocalVideoTrack) {\r\n                this.mLocalVideoTrack.stop()\r\n                this.mLocalVideoTrack.close()\r\n                this.mLocalVideoTrack = null\r\n            }\r\n\r\n            AgoraRTC.createMicrophoneAndCameraTracks()\r\n                .then((tracks) => {\r\n                    this.mLocalAudioTrack = tracks[0]\r\n                    this.mLocalVideoTrack = tracks[1]\r\n\r\n                    AgoraRTC.getDevices().then(it => {\r\n                        resolve(it)\r\n\r\n                        if (this.mLocalAudioTrack) {\r\n                            this.mLocalAudioTrack.stop()\r\n                            this.mLocalAudioTrack.close()\r\n                            this.mLocalAudioTrack = null\r\n                        }\r\n\r\n                        if (this.mLocalVideoTrack) {\r\n                            this.mLocalVideoTrack.stop()\r\n                            this.mLocalVideoTrack.close()\r\n                            this.mLocalVideoTrack = null\r\n                        }\r\n                    })\r\n                })\r\n                .catch(e => {\r\n                    reject(e)\r\n                })\r\n        })\r\n    }\r\n\r\n    join(channel, token) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this._joined == true) {\r\n                resolve(this._uid)\r\n                return\r\n            }\r\n\r\n            this._joined = true\r\n            this._leave = false\r\n            this._uid = 0\r\n            console.debug('join appID: ' + appID + ',channel: ' + channel)\r\n\r\n            this._client.join(appID, channel, token || null).then(uid => {\r\n                console.debug(\r\n                    'join success, channel: ' + channel + ', uid: ' + uid\r\n                )\r\n\r\n                this._uid = uid\r\n                this._joined = true\r\n\r\n                resolve(uid)\r\n            })\r\n                .catch(e => {\r\n                    this._joined = false\r\n                    reject(e)\r\n                    console.error('join error: ' + e)\r\n                })\r\n        })\r\n    }\r\n\r\n    leave() {\r\n        return new Promise((resolve) => {\r\n            if (this._leave == true) {\r\n                resolve()\r\n                return\r\n            }\r\n\r\n            console.debug('leave()')\r\n            this._leave = true\r\n            if (!this._client) return resolve()\r\n\r\n            this._client.leave()\r\n                .then(() => {\r\n                    console.debug('leave() success')\r\n                    this._joined = false\r\n                    this._uid = null\r\n                    resolve()\r\n                })\r\n                .catch((e) => {\r\n                    console.error('leave failed: ' + e)\r\n                })\r\n        })\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}